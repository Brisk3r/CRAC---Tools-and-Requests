<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRAC Zone Availability</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><path fill='%23007bff' d='M0 50 Q 25 25, 50 50 T 100 50 V 100 H 0 Z' /></svg>">
    <style>
        body { font-family: sans-serif; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">
    <div id="root"></div>

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore-compat.js"></script>

    <script type="text/babel">
        // --- CONFIGURATION ---
const firebaseConfig = {
  apiKey: "AIzaSyAF44-oMKqTKPcMgOuKfJJqUTJz9JYTHAg",
  authDomain: "osf---availability-roster.firebaseapp.com",
  projectId: "osf---availability-roster",
  storageBucket: "osf---availability-roster.firebasestorage.app",
  messagingSenderId: "1069751236100",
  appId: "1:1069751236100:web:6a2c9a1570f99927e86751",
  measurementId: "G-JT3PMQ0W6T"
};
        const ZONES = [ 'All Zones', 'Entire Main Pool', 'Main Pool - Lanes 1-4', 'Main Pool - Lanes 5-8', 'Program Pool', 'Hydrotherapy Pool', 'Splash Pad', 'Club Room'];
        const EVENT_TYPES = { 'Class': 'bg-blue-500', 'Booking': 'bg-green-500', 'Closure': 'bg-red-500', 'Event': 'bg-purple-500', 'Maintenance': 'bg-yellow-500' };
        // ---------------------

        const { useState, useEffect, useMemo } = React;
        let db;
        try {
            if (firebase.apps.length === 0) firebase.initializeApp(firebaseConfig);
            db = firebase.firestore();
        } catch(e) { console.error("Firebase init failed", e); }

        const App = () => {
            const [events, setEvents] = useState([]);
            const [isLoading, setIsLoading] = useState(true);
            const [error, setError] = useState(null);
            const [currentDate, setCurrentDate] = useState(new Date());
            const [selectedEvent, setSelectedEvent] = useState(null);
            const [zoneFilter, setZoneFilter] = useState('All Zones');

            useEffect(() => {
                if (!db) {
                    setError("Calendar could not be loaded.");
                    setIsLoading(false);
                    return;
                }
                const unsubscribe = db.collection('calendar_events').onSnapshot(snapshot => {
                    const fetchedEvents = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data(), startDateTime: doc.data().startDateTime.toDate(), endDateTime: doc.data().endDateTime.toDate() }));
                    setEvents(fetchedEvents);
                    setIsLoading(false);
                }, err => {
                    setError(`Failed to load events: ${err.message}`);
                    setIsLoading(false);
                });
                return () => unsubscribe();
            }, []);

            const filteredEvents = useMemo(() => {
                if (zoneFilter === 'All Zones') return events;
                return events.filter(e => e.zone === zoneFilter);
            }, [events, zoneFilter]);

            const eventsByDate = useMemo(() => {
                return filteredEvents.reduce((acc, event) => {
                    const key = event.startDateTime.toDateString();
                    if (!acc[key]) acc[key] = [];
                    acc[key].push(event);
                    return acc;
                }, {});
            }, [filteredEvents]);

            const changeMonth = (offset) => { setCurrentDate(prev => { const d = new Date(prev); d.setMonth(prev.getMonth() + offset); return d; }); };

            return (
                <div className="container mx-auto p-4 max-w-5xl">
                    <Header currentDate={currentDate} changeMonth={changeMonth} zoneFilter={zoneFilter} setZoneFilter={setZoneFilter} />
                    {isLoading && <p>Loading calendar...</p>}
                    {error && <p className="text-red-600">{error}</p>}
                    {!isLoading && !error && <CalendarGrid currentDate={currentDate} eventsByDate={eventsByDate} onEventClick={setSelectedEvent} />}
                    {selectedEvent && <EventModal event={selectedEvent} onClose={() => setSelectedEvent(null)} />}
                </div>
            );
        };
        
        const Header = ({ currentDate, changeMonth, zoneFilter, setZoneFilter }) => (
            <div className="flex flex-col md:flex-row justify-between items-center mb-6">
                <div className="flex items-center space-x-2">
                    <button onClick={() => changeMonth(-1)} className="p-2 rounded-md hover:bg-gray-200">‹</button>
                    <h2 className="text-2xl font-bold w-48 text-center">{currentDate.toLocaleString('default', { month: 'long', year: 'numeric' })}</h2>
                    <button onClick={() => changeMonth(1)} className="p-2 rounded-md hover:bg-gray-200">›</button>
                </div>
                <div className="mt-4 md:mt-0">
                    <label htmlFor="zoneFilter" className="sr-only">Filter by Zone</label>
                    <select id="zoneFilter" value={zoneFilter} onChange={e => setZoneFilter(e.target.value)} className="rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        {ZONES.map(zone => <option key={zone} value={zone}>{zone}</option>)}
                    </select>
                </div>
            </div>
        );

        const CalendarGrid = ({ currentDate, eventsByDate, onEventClick }) => {
            const startDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const endDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const startDate = new Date(startDay);
            startDate.setDate(startDate.getDate() - startDay.getDay());
            const endDate = new Date(endDay);
            endDate.setDate(endDate.getDate() + (6 - endDay.getDay()));
            
            const days = [];
            let day = new Date(startDate);
            while (day <= endDate) { days.push(new Date(day)); day.setDate(day.getDate() + 1); }

            return (
                <div className="grid grid-cols-7 border-t border-l border-gray-200">
                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(d => <div key={d} className="text-center font-bold p-2 border-b border-gray-200 bg-gray-50 text-sm">{d}</div>)}
                    {days.map(d => <CalendarDay key={d.toISOString()} day={d} isCurrentMonth={d.getMonth() === currentDate.getMonth()} events={eventsByDate[d.toDateString()] || []} onEventClick={onEventClick} />)}
                </div>
            );
        };

        const CalendarDay = ({ day, isCurrentMonth, events, onEventClick }) => (
            <div className={`border-r border-b border-gray-200 p-2 min-h-[120px] ${isCurrentMonth ? 'bg-white' : 'bg-gray-50'}`}>
                <time className={`text-sm ${new Date().toDateString() === day.toDateString() ? 'font-bold text-blue-600' : isCurrentMonth ? 'text-gray-700' : 'text-gray-400'}`}>{day.getDate()}</time>
                <div className="mt-1 space-y-1">
                    {events.sort((a,b) => a.startDateTime - b.startDateTime).map(event => <EventChip key={event.id} event={event} onClick={() => onEventClick(event)} />)}
                </div>
            </div>
        );

        const EventChip = ({ event, onClick }) => {
            const time = event.startDateTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit', hour12: false});
            return (
                <button onClick={onClick} className={`w-full text-left text-xs p-1 rounded text-white truncate ${EVENT_TYPES[event.type] || 'bg-gray-400'}`}>
                    <span className="font-bold">{time}</span> {event.title}
                </button>
            );
        };
        
        const EventModal = ({ event, onClose }) => {
             const formatTime = (date) => date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            return (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4" onClick={onClose}>
                    <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg" onClick={e => e.stopPropagation()}>
                         <div className="flex justify-between items-start mb-4">
                            <div>
                                <h3 className="text-xl font-bold">{event.title}</h3>
                                <p className="text-sm text-gray-500">{new Date(event.startDateTime).toLocaleDateString([], {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'})}</p>
                            </div>
                             <span className={`px-3 py-1 text-sm font-bold rounded-full text-white ${EVENT_TYPES[event.type] || 'bg-gray-500'}`}>{event.type}</span>
                         </div>
                         <div className="space-y-2 text-gray-700">
                             <p><strong>Time:</strong> {formatTime(event.startDateTime)} - {formatTime(event.endDateTime)}</p>
                             <p><strong>Zone:</strong> {event.zone}</p>
                             {event.description && <p className="pt-2 whitespace-pre-wrap">{event.description}</p>}
                         </div>
                         <div className="text-right mt-6">
                             <button onClick={onClose} className="py-2 px-4 rounded-md bg-gray-200 hover:bg-gray-300">Close</button>
                         </div>
                    </div>
                </div>
            );
        };

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
